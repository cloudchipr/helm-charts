---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "chart.name" . }}-agent-config
  namespace: {{ include "c8rAgent.namespace" . }}
  labels:
    {{- include "chart.labels" . | nindent 4 }}
data:
  config.json: |
    {
        "chart_version": {{ .Chart.Version | quote }}
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "chart.name" . }}-config
  namespace: {{ include "c8rAgent.namespace" . }}
  labels:
    {{- include "chart.labels" . | nindent 4 }}
data:
  recording_rules.yaml: |
    groups:
      - name: k8s.rules.pod_owner
        rules:
          - expr: |-
              max by (cluster, namespace, workload, pod) (
                label_replace(
                  label_replace(
                    kube_pod_owner{job="kube-state-metrics", owner_kind="ReplicaSet"},
                    "replicaset", "$1", "owner_name", "(.*)"
                  ) * on (replicaset, namespace) group_left(owner_name) topk by (replicaset, namespace) (
                    1, max by (replicaset, namespace, owner_name) (
                      kube_replicaset_owner{job="kube-state-metrics"}
                    )
                  ),
                  "workload", "$1", "owner_name", "(.*)"
                )
              )
            labels:
              workload_type: deployment
            record: namespace_workload_pod:kube_pod_owner:relabel
          - expr: |-
              max by (cluster, namespace, workload, pod) (
                label_replace(
                  kube_pod_owner{job="kube-state-metrics", owner_kind="DaemonSet"},
                  "workload", "$1", "owner_name", "(.*)"
                )
              )
            labels:
              workload_type: daemonset
            record: namespace_workload_pod:kube_pod_owner:relabel
          - expr: |-
              max by (cluster, namespace, workload, pod) (
                label_replace(
                  kube_pod_owner{job="kube-state-metrics", owner_kind="StatefulSet"},
                  "workload", "$1", "owner_name", "(.*)"
                )
              )
            labels:
              workload_type: statefulset
            record: namespace_workload_pod:kube_pod_owner:relabel
          - expr: |-
              max by (cluster, namespace, workload, pod) (
                label_replace(
                  kube_pod_owner{job="kube-state-metrics", owner_kind="Job"},
                  "workload", "$1", "owner_name", "(.*)"
                )
              )
            labels:
              workload_type: job
            record: namespace_workload_pod:kube_pod_owner:relabel


  prometheus.yaml: |
    global:
      evaluation_interval: 1m
      scrape_interval: 1m
      scrape_timeout: 30s
    rule_files:
      - /etc/prometheus/recording_rules.yaml
    scrape_configs:
      - job_name: kube-state-metrics
        static_configs:
          - targets: ["localhost:8080"]

      {{- if .Values.nodeexporter.create }}

      - job_name: node-exporter
        honor_labels: true
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_node_name
            action: replace
            target_label: node
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              own_namespace: true
            selectors:
              - role: endpoints
                field: metadata.name={{ printf "%s-%s" .Release.Name "nodeexporter" }}

      {{- else }}

      - job_name: node-exporter
        honor_labels: true
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_node_name
            action: replace
            target_label: node
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - {{ .Values.nodeexporter.useExisting.namespace | required "nodeexporter.useExisting.namespace is required when nodeexporter.create is false" }}
            selectors:
              - role: endpoints
                field: metadata.name={{ .Values.nodeexporter.useExisting.name | required "nodeexporter.useExisting.name is required when nodeexporter.create is false" }}

      {{- end }}


      {{- if .Values.dcgmexporter.create }}

      - job_name: dcgm-exporter
        honor_labels: true
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_node_name
            action: replace
            target_label: node
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - {{ default "kube-system" .Values.dcgmexporter.namespaceOverride }}
            selectors:
              - role: endpoints
                field: metadata.name={{ printf "%s-%s" .Release.Name "dcgmexporter" }}

      {{- else }}
      {{- if .Values.dcgmexporter.useExisting }}
      - job_name: dcgm-exporter
        honor_labels: true
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_node_name
            action: replace
            target_label: node
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - {{ default "kube-system" .Values.dcgmexporter.useExisting.namespace }}
            selectors:
              - role: endpoints
                field: metadata.name={{ .Values.dcgmexporter.useExisting.name | required "dcgmexporter.useExisting.name is required when dcgmexporter.useExisting exists" }}
      {{- end }}
      {{- end }}

      - job_name: opencost
        honor_labels: true
        metrics_path: /metrics
        scheme: http
        static_configs:
        - targets:
          - localhost:9003

      - job_name: kubelet-probes
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        metrics_path: /metrics/probes
        scheme: https
        honor_labels: true
        honor_timestamps: true
        relabel_configs:
          - source_labels:
              - __metrics_path__
            action: replace
            target_label: metrics_path
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        kubernetes_sd_configs:
          - follow_redirects: true
            role: endpoints
            selectors:
              - role: endpoints
                label: app.kubernetes.io/managed-by=c8r-agent
                field: metadata.name=c8r-agent-kubelet

      - job_name: kubelet
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        honor_labels: true
        honor_timestamps: true
        scheme: https
        relabel_configs:
          - source_labels:
              - __metrics_path__
            action: replace
            target_label: metrics_path
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        kubernetes_sd_configs:
          - follow_redirects: true
            role: endpoints
            selectors:
              - role: endpoints
                label: app.kubernetes.io/managed-by=c8r-agent
                field: metadata.name=c8r-agent-kubelet

      - job_name: kubelet-cadvisor
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        honor_labels: true
        honor_timestamps: true
        metric_relabel_configs:
          - action: drop
            regex: container_cpu_(cfs_throttled_seconds_total|load_average_10s|system_seconds_total|user_seconds_total)
            source_labels:
              - __name__
          - action: drop
            regex: container_fs_(io_current|io_time_seconds_total|io_time_weighted_seconds_total|reads_merged_total|sector_reads_total|sector_writes_total|writes_merged_total)
            source_labels:
              - __name__
          - action: drop
            regex: container_memory_(mapped_file|swap)
            source_labels:
              - __name__
          - action: drop
            regex: container_(file_descriptors|tasks_state|threads_max)
            source_labels:
              - __name__
          - action: drop
            regex: container_spec.*
            source_labels:
              - __name__
          - action: drop
            regex: .+;
            source_labels:
              - id
              - pod
        metrics_path: /metrics/cadvisor
        scheme: https
        relabel_configs:
          - action: replace
            source_labels:
              - __metrics_path__
            target_label: metrics_path
          - action: replace
            source_labels:
              - __meta_kubernetes_endpoint_address_target_name
            target_label: node
          - action: replace
            source_labels:
              - __meta_kubernetes_service_name
            target_label: service
          - action: replace
            source_labels:
              - __meta_kubernetes_service_port_name
            target_label: endpoint
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        kubernetes_sd_configs:
          - follow_redirects: true
            role: endpoints
            selectors:
              - role: endpoints
                label: app.kubernetes.io/managed-by=c8r-agent
                field: metadata.name=c8r-agent-kubelet

