apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "chart.name" . }}-config
  namespace: {{ include "c8rAgent.namespace" . }}
  labels:
    {{- include "chart.labels" . | nindent 4 }}
data:
  prometheus.yaml: |
    global:
      evaluation_interval: 1m
      scrape_interval: 1m
      scrape_timeout: 30s
    rule_files:
      - /etc/config/recording_rules.yml
      - /etc/config/alerting_rules.yml
      - /etc/config/rules
      - /etc/config/alerts
    scrape_configs:
      - job_name: kube-state-metrics
        static_configs:
          - targets: ["localhost:8080"]

        metric_relabel_configs:
          - source_labels: [__name__]
            regex: '(kube_node_info|kube_node_status_capacity|kube_persistentvolume_capacity_bytes|kube_persistentvolumeclaim_info|kube_persistentvolumeclaim_resource_requests_storage_bytes|kube_pod_container_resource_requests|kube_pod_owner|kube_replicaset_owner|namespace_workload_pod:kube_pod_owner:relabel)'
            action: keep


      {{- if .Values.nodeexporter.create }}

      - job_name: node-exporter
        honor_labels: true
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_node_name
            action: replace
            target_label: node
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              own_namespace: true
            selectors:
              - role: endpoints
                field: metadata.name={{ printf "%s-%s" .Release.Name "nodeexporter" }}

      {{- else }}

      - job_name: node-exporter
        honor_labels: true
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_node_name
            action: replace
            target_label: node
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - {{ .Values.nodeexporter.useExisting.namespace | required "nodeexporter.useExisting.namespace is required when nodeexporter.create is false" }}
            selectors:
              - role: endpoints
                field: metadata.name={{ .Values.nodeexporter.useExisting.name | required "nodeexporter.useExisting.name is required when nodeexporter.create is false" }}

      {{- end }}


      {{- if .Values.dcgmexporter.create }}

      - job_name: dcgm-exporter
        honor_labels: true
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_node_name
            action: replace
            target_label: node
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - {{ default "kube-system" .Values.dcgmexporter.namespaceOverride }}
            selectors:
              - role: endpoints
                field: metadata.name={{ printf "%s-%s" .Release.Name "dcgmexporter" }}
        metric_relabel_configs:
          - source_labels: [__name__]
            regex: '(DCGM_FI_DEV_DEC_UTIL|DCGM_FI_PROF_GR_ENGINE_ACTIVE)'
            action: keep

      {{- else }}
      {{- if .Values.dcgmexporter.useExisting }}
      - job_name: dcgm-exporter
        honor_labels: true
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_node_name
            action: replace
            target_label: node
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - {{ default "kube-system" .Values.dcgmexporter.useExisting.namespace }}
            selectors:
              - role: endpoints
                field: metadata.name={{ .Values.dcgmexporter.useExisting.name | required "dcgmexporter.useExisting.name is required when dcgmexporter.useExisting exists" }}
        metric_relabel_configs:
          - source_labels: [__name__]
            regex: '(DCGM_FI_DEV_DEC_UTIL|DCGM_FI_PROF_GR_ENGINE_ACTIVE)'
            action: keep
      {{- end }}
      {{- end }}

      - job_name: opencost
        honor_labels: true
        metrics_path: /metrics
        scheme: http
        static_configs:
        - targets:
          - localhost:9003
        metric_relabel_configs:
          - source_labels: [__name__]
            regex: '(container_cpu_allocation|container_gpu_allocation|container_memory_allocation_bytes|deployment_match_labels|kubecost_load_balancer_cost|kubecost_network_internet_egress_cost|kubecost_network_region_egress_cost|kubecost_network_zone_egress_cost|kubecost_node_is_spot|kubecost_pv_info|kube_node_labels|kube_node_status_capacity|kube_persistentvolume_capacity_bytes|kube_persistentvolumeclaim_info|kube_persistentvolumeclaim_resource_requests_storage_bytes|kube_pod_container_resource_requests|kube_pod_labels|kube_pod_owner|node_cpu_hourly_cost|node_gpu_hourly_cost|node_ram_hourly_cost|pod_pvc_allocation|pv_hourly_cost|service_selector_labels|statefulSet_match_labels)'
            action: keep

      - job_name: kubelet-cadvisor
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        honor_labels: true
        honor_timestamps: true
        metrics_path: /metrics/cadvisor
        scheme: https
        relabel_configs:
          - action: replace
            source_labels:
              - __metrics_path__
            target_label: metrics_path
          - action: replace
            source_labels:
              - __meta_kubernetes_endpoint_address_target_name
            target_label: node
          - action: replace
            source_labels:
              - __meta_kubernetes_service_name
            target_label: service
          - action: replace
            source_labels:
              - __meta_kubernetes_service_port_name
            target_label: endpoint
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        kubernetes_sd_configs:
          - follow_redirects: true
            role: endpoints
            selectors:
              - role: endpoints
                label: app.kubernetes.io/managed-by=c8r-agent
                field: metadata.name=c8r-agent-kubelet
        metric_relabel_configs:
          - source_labels: [__name__]
            regex: '(container_cpu_usage_seconds_total|container_memory_working_set_bytes|container_network_receive_bytes_total|container_network_transmit_bytes_total)'
            action: keep
