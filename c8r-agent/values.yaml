## @section General Configuration

## @param namespaceOverride Overrides the default namespace where the chart will be installed (Optional).
namespaceOverride: ""

## @param replicaCount Number of replicas for the deployment.
replicaCount: 1

## @param imagePullPolicy Image pull policy (Always, IfNotPresent, Never).
imagePullPolicy: Always

## @param imageRegistry Default registry for all images (Optional).
imageRegistry: ""

## @param serviceAccount.name service account name to create
## @param serviceAccount.labels service account labels
## @param serviceAccount.annotations service account annotations
serviceAccount:
  name: c8r-agent-sa
  labels: {}
  annotations: {}

## @param c8r_api_key Token to authenticate with C8R API. (Required).
c8r_api_key: ""

## @section Deployment Configuration
## Configurations for different components like Opencost, proxy, and redis update.

deployment:
  ## @param deployment.labels Extra labels for the service.
  labels: {}

  ## @param deployment.annotations Annotations for the service.
  annotations: {}

  ## @param deployment.nodeSelector Node Selector labels for pod assignment (Optional).
  nodeSelector: {}

  ## @param deployment.affinity Affinity settings for pod assignment (Optional).
  affinity: {}

  ## @param deployment.tolerations Tolerations for pod assignment (Optional).
  tolerations: []

  ## @section Prometheus Container Configuration

  c8rPrometheuServer:
    ## @param deployment.c8rPrometheuServer.name Container name for the Opencost component (Optional).
    name: ""

    ## @param deployment.c8rPrometheuServer.image Docker image for the Opencost.
    image: ""

    ## @param deployment.c8rPrometheuServer.tag Docker image tag for the Opencost.
    tag: ""

    ## @param deployment.c8rPrometheuServer.command Command for Opencost container.
    command: []

    ## @param deployment.c8rPrometheuServer.args Args for Opencost container.
    args: []

    ## @param deployment.c8rPrometheuServer.resources CPU/Memory resource requests/limits.
    resources: {}

    ## Health check probes configuration.
    probes:
      ## @param deployment.c8rPrometheuServer.probes.enabled Enable/Disable Probes for pod.
      enabled: true

      ## @param deployment.c8rPrometheuServer.probes.readinessProbe Custom readiness probe configuration.
      readinessProbe: {}

      ## @param deployment.c8rPrometheuServer.probes.livenessProbe Custom liveness probe configuration.
      livenessProbe: {}

      ## @param deployment.c8rPrometheuServer.probes.startupProbe Custom startup probe configuration.
      startupProbe: {}

  ## @section Kube-State-Metrics Container Configuration

  c8rKubeStateMetrics:
    ## @param deployment.c8rKubeStateMetrics.name Container name for the kube-state-metrics component (Optional).
    name: ""

    ## @param deployment.c8rKubeStateMetrics.image Docker image for the proxy.
    image: kube-state-metrics/kube-state-metrics

    ## @param deployment.c8rKubeStateMetrics.tag Docker image tag for the proxy.
    tag: "v2.10.0"

    ## @param deployment.c8rKubeStateMetrics.command Command for Opencost container.
    command: []

    ## @param deployment.c8rKubeStateMetrics.args Args for Opencost container.
    args: []

    ## Health check probes configuration.
    probes:
      ## @param deployment.c8rKubeStateMetrics.probes.enabled Enable/Disable Probes for pod.
      enabled: true

      ## @param deployment.c8rKubeStateMetrics.probes.readinessProbe Custom readiness probe configuration.
      readinessProbe: {}

      ## @param deployment.c8rKubeStateMetrics.probes.livenessProbe Custom liveness probe configuration.
      livenessProbe: {}

      ## @param deployment.c8rKubeStateMetrics.probes.startupProbe Custom startup probe configuration.
      startupProbe: {}

  ## @section Open Cost Container Configuration

  c8rOpenCost:
    ## @param deployment.c8rOpenCost.name Deployment name for the OpenCost component (Optional).
    name: ""

    ## @param deployment.c8rOpenCost.image Docker image for the OpenCost.
    image: ""

    ## @param deployment.c8rOpenCost.tag Docker image tag for the OpenCost.
    tag: ""

    ## @param deployment.c8rOpenCost.command Command for Opencost container.
    command: []

    ## @param deployment.c8rOpenCost.args Args for Opencost container.
    args: []

    ## @param deployment.c8rOpenCost.resources CPU/Memory resource requests/limits.
    resources: {}

    ## @param deployment.c8rOpenCost.env Environment variables for the OpenCost container.
    env: {}
      ## NAME: Value

  ## @section C8R Agent Configuration

  c8rAgent:
    ## @param deployment.c8rAgent.name Deployment name for the C8R Agent component (Optional).
    name: ""

    ## @param deployment.c8rAgent.image Docker image for the C8R Agent
    image: ""

    ## @param deployment.c8rAgent.tag Docker image tag for the OpenCost.
    tag: ""

    ## @param deployment.c8rAgent.command Command for C8R Agent container.
    command: []

    ## @param deployment.c8rAgent.args Args for C8R Agent container.
    args: []

    ## @param deployment.c8rAgent.resources CPU/Memory resource requests/limits.
    resources: {}

    ## @param deployment.c8rAgent.env Environment variables for the C8R Agent container.
    env: {}
      ## NAME: Value

## @section node-exporter Configuration

## @param nodeexporter.create Deploy Node Exporter as a dependency.
## @skip nodeexporter.service.port Deploy Node Exporter as a dependency.
## @skip nodeexporter.service.targetPort Deploy Node Exporter as a dependency.
## @param nodeexporter.useExisting Node Exporter service name and namespace to use when create is false.
nodeexporter:
  create: true
  service:
    port: 9119
    targetPort: 9119
  useExisting: {}
    # name: ""
    # namespace: ""


## @section dcgm-exporter Configuration

## @param dcgmexporter.create Deploy Nvidia GPU Exporter as a dependency.
## @skip dcgmexporter.service.port
## @skip dcgmexporter.service.address
## @skip dcgmexporter.serviceMonitor.enabled
## @skip dcgmexporter.affinity
## @skip dcgmexporter.nodeSelector
## @skip dcgmexporter.tolerations
## @skip dcgmexporter.namespaceOverride install in the kube-system namespace
## @param dcgmexporter.useExisting Nvidia GPU Exporter service name and namespace to use when create is false.
dcgmexporter:
  useExisting: {}
  create: true
  namespaceOverride: kube-system
  service:
    port: 9449
    address: ":9449"
  serviceMonitor:
    enabled: false
  affinity: {}
    # nodeAffinity:
    #  requiredDuringSchedulingIgnoredDuringExecution:
    #    nodeSelectorTerms:
    #    - matchExpressions:
    #      - key: nvidia.com/gpu.present
    #        operator: Exists
  nodeSelector: {}
    # nvidia.com/gpu.present: 'true'
  tolerations: []
  # tolerations:
  #   - key: nvidia.com/gpu
  #     operator: Equal
  #     value: present
  #     effect: NoSchedule