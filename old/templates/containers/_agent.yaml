{{- define "c8r-agent.container" -}}
- name: c8r-agent
  image: {{ .Values.global.image.registry | default .Values.image.registry }}/{{ .Values.image.repository }}{{ include "c8r-agent.imageId" . }}
  imagePullPolicy: {{ .Values.image.pullPolicy }}
  args:
    - -config.file=/etc/agent/{{ include "c8r-agent.config-map.key" . }}
    - -server.http.address={{ .Values.agent.listenAddr }}:{{ .Values.agent.listenPort }}   
    {{- range .Values.agent.extraArgs }}
    - {{ . }}
    {{- end}}
  env:
    - name: AGENT_MODE
      value: static
    - name: HOSTNAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    {{- range .Values.agent.extraEnv }}
    - {{- toYaml . | nindent 6 }}
    {{- end }}
  {{- if .Values.agent.envFrom }}
  envFrom:
    {{- toYaml .Values.agent.envFrom | nindent 4 }}
  {{- end }}
  ports:
    - containerPort: {{ .Values.agent.listenPort }}
      name: http-metrics
    {{- range $portMap := .Values.agent.extraPorts }}
    - containerPort: {{ $portMap.targetPort }}
      {{- if $portMap.hostPort }}
      hostPort: {{ $portMap.hostPort }}
      {{- end}}
      name: {{ $portMap.name }}
      protocol: {{ coalesce $portMap.protocol "TCP" }}
    {{- end }}
  readinessProbe:
    httpGet:
      path: /-/ready
      port: {{ .Values.agent.listenPort }}
    initialDelaySeconds: 10
    timeoutSeconds: 1
  {{- with .Values.agent.resources }}
  resources:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.agent.securityContext }}
  securityContext:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  volumeMounts:
    - name: config
      mountPath: /etc/agent
    {{- range .Values.agent.mounts.extra }}
    - {{- toYaml . | nindent 6 }}
    {{- end }}
{{- end }}
